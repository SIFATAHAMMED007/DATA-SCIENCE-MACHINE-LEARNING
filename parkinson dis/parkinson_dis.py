# -*- coding: utf-8 -*-
"""parkinson dis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fzliAJwbMJFBHRy2tbDPqJrKnAzdrrhV
"""

import numpy as np
import pandas as pd

from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

df = pd.read_csv("/content/Parkinsson disease.csv")

df.head()

df.info()

df.describe()

df.shape

df.isnull().sum()

df["status"].value_counts()

df.groupby("status").mean()

x = df.drop(columns=["name","status"],axis=1)
y = df["status"]

print(x)

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=2)

ss = StandardScaler()
ss.fit(x_train)

x_train = ss.transform(x_train)
x_test = ss.transform(x_test)

print(x_train)

model = svm.SVC(kernel="linear")

model.fit(x_train,y_train)

x_train_pred = model.predict(x_train)
train_data_accu = accuracy_score(y_train,x_train_pred)

print("acc of training data : ",train_data_accu)



x_test_pred = model.predict(x_test)
test_data_accu = accuracy_score(y_test,x_test_pred)



print("acc of testing data : ",test_data_accu)

input_data = ()

input_data_np = np.asarray(input_data)

input_data_re = input_data_np.reshape(1,-1)

s_data = ss.transform(input_data_re)

pred = model.predict(s_data)

print(pred)

if(pred[0]==0):
  print("Negative,No Parkension Found ")

else:
  print("Positive, Parkindon Found")