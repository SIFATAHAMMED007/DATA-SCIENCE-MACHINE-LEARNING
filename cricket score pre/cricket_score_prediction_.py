# -*- coding: utf-8 -*-
"""cricket score prediction .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1knoBFEPixz-5vbx8dT6szYAaGfwYVQfg
"""

import pandas as pd
import numpy as np

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/t20i_info.csv')

df.head()

df.isnull().sum()

df.shape

df[df["city"].isnull()]["venue"][0].split(" ")[0]

df["city"] = df["city"].fillna(df["venue"].apply(lambda x: x.split(" ")[0]))

df.head()

eligible_city = df["city"].value_counts()[df["city"].value_counts() > 600].index.tolist()

eligible_city

df = df[df["city"].isin(eligible_city)]

df.head()

df.shape

df["current_score"] = df.groupby("match_id")["runs"].transform(lambda x: pd.to_numeric(x, errors='coerce').cumsum())

df.head()

df["over"] = df["ball"].apply(lambda x : str(x).split(".")[0])
df["ball_no"] = df["ball"].apply(lambda x : str(x).split(".")[1])

df.head()

df["ball_bowled"] = ((df["over"].astype(int)*6) + df["ball_no"].astype(int))

df.head()

df["balls_left"] = 120 - df["ball_bowled"]

df["balls_left"] = df["balls_left"].apply(lambda x : 0 if x < 0 else x)

df.tail()

df["player_dismissed"] = df["player_dismissed"].apply(lambda x : x if x == "0" else "1")
df["player_dismissed"]

df["player_dismissed"] = df["player_dismissed"].astype(int)

df["player_dismissed"] = df["player_dismissed"].astype(int)  # Ensure 'player_dismissed' is numeric
df["player_dismissed"] = df.groupby("match_id")["player_dismissed"].cumsum()

df["wicket_left"] = 10 - df["player_dismissed"]

df["current_run_rate"] = (df["current_score"]*6)/df["ball_bowled"]

groups = df.groupby("match_id")
match_ids = df["match_id"].unique()
last_five = []
for id in match_ids:
    group_data = groups.get_group(id)

    group_data["runs"] = pd.to_numeric(group_data["runs"], errors='coerce')

    group_data["runs_in_prev_5"] = group_data["runs"].rolling(window=30, min_periods=1).sum().values.tolist()
    last_five.extend(group_data["runs"].rolling(window=30, min_periods=1).sum().values.tolist())

df["last_five"] = last_five

final_df = df.groupby('match_id').sum()['runs'].reset_index().merge(df, on='match_id')

final_df

final_df.columns

final_df = final_df[['batting_team', 'bowling_team', 'city', 'current_score', 'balls_left', 'wicket_left',
       'current_run_rate', 'last_five', 'runs_x']]

final_df.dropna(inplace=True)

final_df

final_df.shape

final_df = final_df.sample(final_df.shape[0])

final_df.shape

x = final_df.drop(columns=['runs_x'])
y = final_df['runs_x']

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

x_train

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import r2_score, mean_absolute_error,accuracy_score

transformer = ColumnTransformer([
    ('transformer', OneHotEncoder(sparse_output=False, drop='first'),['batting_team','bowling_team', 'city']) # Changed 'sparse' to 'sparse_output'
], remainder='passthrough')

pipe = Pipeline(steps=[
    ('step1', transformer),
    ('step2', StandardScaler()),
    ('step3', XGBRegressor(n_estimators=1000, learning_rate=0.2, max_depth=12, random_state=1))
])

pipe.fit(x_train, y_train)
y_pred = pipe.predict(x_test)

r2_score(y_test, y_pred)

mean_absolute_error(y_test, y_pred)